<section anchor="security" title="Security Considerations">
    <section title="Server Authority" anchor="authority">
        <t>
            HTTP/2 relies on the HTTP/1.1 definition of authority for determining whether a server is
            authoritative in providing a given response (see<xref target="RFC7230" x:fmt=","
                                                                  x:rel="#establishing.authority"/>). This
            relies on local name resolution for the "http"
            URI scheme and the authenticated server identity for the "https" scheme (see<xref
                target="RFC2818" x:fmt="," x:sec="3"/>).
        </t>
    </section>

    <section title="Cross-Protocol Attacks">
        <t>
            In a cross-protocol attack, an attacker causes a client to initiate a transaction in one
            protocol toward a server that understands a different protocol. An attacker might be able
            to cause the transaction to appear as a valid transaction in the second protocol. In
            combination with the capabilities of the web context, this can be used to interact with
            poorly protected servers in private networks.
        </t>
        <t>
            Completing a TLS handshake with an ALPN identifier for HTTP/2 can be considered sufficient
            protection against cross-protocol attacks. ALPN provides a positive indication that a
            server is willing to proceed with HTTP/2, which prevents attacks on other TLS-based
            protocols.
        </t>
        <t>
            The encryption in TLS makes it difficult for attackers to control the data that could be
            used in a cross-protocol attack on a cleartext protocol.
        </t>
        <t>
            The cleartext version of HTTP/2 has minimal protection against cross-protocol attacks.
            The
            <xref target="ConnectionHeader">connection preface</xref>
            contains a string that is
            designed to confuse HTTP/1.1 servers, but no special protection is offered for other
            protocols. A server that is willing to ignore parts of an HTTP/1.1 request containing an
            Upgrade header field in addition to the client connection preface could be exposed to a
            cross-protocol attack.
        </t>
    </section>

    <section title="Intermediary Encapsulation Attacks">
        <t>
            The HTTP/2 header field encoding allows the expression of names that are not valid field
            names in the Internet Message Syntax used by HTTP/1.1. Requests or responses containing
            invalid header field names MUST be treated as<xref target="malformed">malformed</xref>.
            An intermediary therefore cannot translate an HTTP/2 request or response containing an
            invalid field name into an HTTP/1.1 message.
        </t>
        <t>
            Similarly, HTTP/2 allows header field values that are not valid. While most of the values
            that can be encoded will not alter header field parsing, carriage return (CR, ASCII 0xd),
            line feed (LF, ASCII 0xa), and the zero character (NUL, ASCII 0x0) might be exploited by
            an attacker if they are translated verbatim. Any request or response that contains a
            character not permitted in a header field value MUST be treated as<xref
                target="malformed">malformed</xref>. Valid characters are defined by the
            <spanx
                    style="verb">field-content
            </spanx>
            ABNF rule in<xref target="RFC7230" x:fmt="of"
                              x:rel="#header.fields"/>.
        </t>
    </section>

    <section title="Cacheability of Pushed Responses">
        <t>
            Pushed responses do not have an explicit request from the client; the request
            is provided by the server in the
            <x:ref>PUSH_PROMISE</x:ref>
            frame.
        </t>
        <t>
            Caching responses that are pushed is possible based on the guidance provided by the origin
            server in the Cache-Control header field. However, this can cause issues if a single
            server hosts more than one tenant. For example, a server might offer multiple users each
            a small portion of its URI space.
        </t>
        <t>
            Where multiple tenants share space on the same server, that server MUST ensure that
            tenants are not able to push representations of resources that they do not have authority
            over. Failure to enforce this would allow a tenant to provide a representation that would
            be served out of cache, overriding the actual representation that the authoritative tenant
            provides.
        </t>
        <t>
            Pushed responses for which an origin server is not authoritative (see
            <xref target="authority"/>) MUST NOT be used or cached.
        </t>
    </section>

    <section anchor="dos" title="Denial-of-Service Considerations">
        <t>
            An HTTP/2 connection can demand a greater commitment of resources to operate than an
            HTTP/1.1 connection. The use of header compression and flow control depend on a
            commitment of resources for storing a greater amount of state. Settings for these
            features ensure that memory commitments for these features are strictly bounded.
        </t>
        <t>
            The number of
            <x:ref>PUSH_PROMISE</x:ref>
            frames is not constrained in the same fashion.
            A client that accepts server push SHOULD limit the number of streams it allows to be in
            the "reserved (remote)" state. An excessive number of server push streams can be treated as
            a
            <xref target="StreamErrorHandler">stream error</xref>
            of type
            <x:ref>ENHANCE_YOUR_CALM</x:ref>.
        </t>
        <t>
            Processing capacity cannot be guarded as effectively as state capacity.
        </t>
        <t>
            The
            <x:ref>SETTINGS</x:ref>
            frame can be abused to cause a peer to expend additional
            processing time. This might be done by pointlessly changing SETTINGS parameters, setting
            multiple undefined parameters, or changing the same setting multiple times in the same
            frame.
            <x:ref>WINDOW_UPDATE</x:ref>
            or
            <x:ref>PRIORITY</x:ref>
            frames can be abused to
            cause an unnecessary waste of resources.
        </t>
        <t>
            Large numbers of small or empty frames can be abused to cause a peer to expend time
            processing frame headers. Note, however, that some uses are entirely legitimate, such as
            the sending of an empty
            <x:ref>DATA</x:ref>
            or
            <x:ref>CONTINUATION</x:ref>
            frame at the
            end of a stream.
        </t>
        <t>
            Header compression also offers some opportunities to waste processing resources; see
            <xref
                    target="COMPRESSION" x:fmt="of" x:rel="#Security"/>
            for more details on potential abuses.
        </t>
        <t>
            Limits in
            <x:ref>SETTINGS</x:ref>
            parameters cannot be reduced instantaneously, which
            leaves an endpoint exposed to behavior from a peer that could exceed the new limits. In
            particular, immediately after establishing a connection, limits set by a server are not
            known to clients and could be exceeded without being an obvious protocol violation.
        </t>
        <t>
            All these features &mdash; i.e.,
            <x:ref>SETTINGS</x:ref>
            changes, small frames, header
            compression &mdash; have legitimate uses. These features become a burden only when they are
            used unnecessarily or to excess.
        </t>
        <t>
            An endpoint that doesn't monitor this behavior exposes itself to a risk of denial-of-service
            attack. Implementations SHOULD track the use of these features and set limits on
            their use. An endpoint MAY treat activity that is suspicious as a
            <xref
                    target="ConnectionErrorHandler">connection error
            </xref>
            of type
            <x:ref>ENHANCE_YOUR_CALM</x:ref>.
        </t>
        <section anchor="MaxHeaderBlock" title="Limits on Header Block Size">
            <t>
                A large
                <xref target="HeaderBlock">header block</xref>
                can cause an implementation to
                commit a large amount of state. Header fields that are critical for routing can appear
                toward the end of a header block, which prevents streaming of header fields to their
                ultimate destination. This ordering and other reasons, such as ensuring cache
                correctness, mean that an endpoint might need to buffer the entire header block. Since
                there is no hard limit to the size of a header block, some endpoints could be forced to
                commit a large amount of available memory for header fields.
            </t>
            <t>
                An endpoint can use the
                <x:ref>SETTINGS_MAX_HEADER_LIST_SIZE</x:ref>
                to advise peers of
                limits that might apply on the size of header blocks. This setting is only advisory, so
                endpoints MAY choose to send header blocks that exceed this limit and risk having the
                request or response being treated as malformed. This setting is specific to a
                connection, so any request or response could encounter a hop with a lower, unknown
                limit. An intermediary can attempt to avoid this problem by passing on values presented
                by different peers, but they are not obligated to do so.
            </t>
            <t>
                A server that receives a larger header block than it is willing to handle can send an
                HTTP 431 (Request Header Fields Too Large) status code<xref target="RFC6585"/>. A
                client can discard responses that it cannot process. The header block MUST be processed
                to ensure a consistent connection state, unless the connection is closed.
            </t>
        </section>

        <section anchor="connectDos" title="CONNECT Issues">
            <t>
                The CONNECT method can be used to create disproportionate load on an proxy, since stream
                creation is relatively inexpensive when compared to the creation and maintenance of a
                TCP connection. A proxy might also maintain some resources for a TCP connection beyond
                the closing of the stream that carries the CONNECT request, since the outgoing TCP
                connection remains in the TIME_WAIT state. Therefore, a proxy cannot rely on
                <x:ref>SETTINGS_MAX_CONCURRENT_STREAMS</x:ref>
                alone to limit the resources consumed by
                CONNECT requests.
            </t>
        </section>
    </section>

    <section title="Use of Compression">
        <t>
            Compression can allow an attacker to recover secret data when it is compressed in the same
            context as data under attacker control. HTTP/2 enables compression of header fields
            (<xref target="HeaderBlock"/>); the following concerns also apply to the use of HTTP
            compressed content-codings (<xref target="RFC7231" x:fmt="," x:rel="#content.codings"/>).
        </t>
        <t>
            There are demonstrable attacks on compression that exploit the characteristics of the web
            (e.g.,<xref target="BREACH"/>). The attacker induces multiple requests containing
            varying plaintext, observing the length of the resulting ciphertext in each, which
            reveals a shorter length when a guess about the secret is correct.
        </t>
        <t>
            Implementations communicating on a secure channel MUST NOT compress content that includes
            both confidential and attacker-controlled data unless separate compression dictionaries
            are used for each source of data. Compression MUST NOT be used if the source of data
            cannot be reliably determined. Generic stream compression, such as that provided by TLS,
            MUST NOT be used with HTTP/2 (see<xref target="TLSUsage"/>).
        </t>
        <t>
            Further considerations regarding the compression of header fields are described in<xref
                target="COMPRESSION"/>.
        </t>
    </section>

    <section title="Use of Padding" anchor="padding">
        <t>
            Padding within HTTP/2 is not intended as a replacement for general purpose padding, such
            as might be provided by<xref target="TLS12">TLS</xref>. Redundant padding could even be
            counterproductive. Correct application can depend on having specific knowledge of the
            data that is being padded.
        </t>
        <t>
            To mitigate attacks that rely on compression, disabling or limiting compression might be
            preferable to padding as a countermeasure.
        </t>
        <t>
            Padding can be used to obscure the exact size of frame content and is provided to
            mitigate specific attacks within HTTP, for example, attacks where compressed content
            includes both attacker-controlled plaintext and secret data (e.g.,<xref
                target="BREACH"/>).
        </t>
        <t>
            Use of padding can result in less protection than might seem immediately obvious. At
            best, padding only makes it more difficult for an attacker to infer length information by
            increasing the number of frames an attacker has to observe. Incorrectly implemented
            padding schemes can be easily defeated. In particular, randomized padding with a
            predictable distribution provides very little protection; similarly, padding payloads to a
            fixed size exposes information as payload sizes cross the fixed-sized boundary, which could
            be possible if an attacker can control plaintext.
        </t>
        <t>
            Intermediaries SHOULD retain padding for
            <x:ref>DATA</x:ref>
            frames but MAY drop padding
            for
            <x:ref>HEADERS</x:ref>
            and
            <x:ref>PUSH_PROMISE</x:ref>
            frames. A valid reason for an
            intermediary to change the amount of padding of frames is to improve the protections that
            padding provides.
        </t>
    </section>

    <section title="Privacy Considerations">
        <t>
            Several characteristics of HTTP/2 provide an observer an opportunity to correlate actions
            of a single client or server over time. These include the value of settings, the manner
            in which flow-control windows are managed, the way priorities are allocated to streams,
            the timing of reactions to stimulus, and the handling of any features that are controlled by
            settings.
        </t>
        <t>
            As far as these create observable differences in behavior, they could be used as a basis
            for fingerprinting a specific client, as defined in<xref target="HTML5" x:fmt="of"
                                                                     x:sec="1.8"
                                                                     x:rel="introduction.html#fingerprint"/>.
        </t>
        <t>
            HTTP/2's preference for using a single TCP connection allows correlation of a user's
            activity on a site. Reusing connections for different origins allows tracking
            across those origins.
        </t>
        <t>
            Because the PING and SETTINGS frames solicit immediate responses, they can be used by an
            endpoint to measure latency to their peer. This might have privacy implications in
            certain scenarios.
        </t>
    </section>
</section>