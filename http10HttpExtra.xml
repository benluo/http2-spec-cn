<section anchor="HttpExtra" title="Additional HTTP Requirements/Considerations">
    <t>
        This section outlines attributes of the HTTP protocol that improve interoperability, reduce
        exposure to known security vulnerabilities, or reduce the potential for implementation
        variation.
    </t>

    <section title="Connection Management">
        <t>
            HTTP/2 connections are persistent. For best performance, it is expected that clients will not
            close connections until it is determined that no further communication with a server is
            necessary (for example, when a user navigates away from a particular web page) or until
            the server closes the connection.
        </t>
        <t>
            Clients SHOULD NOT open more than one HTTP/2 connection to a given host and port pair,
            where the host is derived from a URI, a selected<xref target="ALT-SVC">alternative
            service</xref>, or a configured proxy.
        </t>
        <t>
            A client can create additional connections as replacements, either to replace connections
            that are near to exhausting the available<xref target="StreamIdentifiers">stream
            identifier space</xref>, to refresh the keying material for a TLS connection, or to
            replace connections that have encountered<xref
                target="ConnectionErrorHandler">errors</xref>.
        </t>
        <t>
            A client MAY open multiple connections to the same IP address and TCP port using different
            <xref target="TLS-EXT">Server Name Indication</xref>
            values or to provide different TLS
            client certificates but SHOULD avoid creating multiple connections with the same
            configuration.
        </t>
        <t>
            Servers are encouraged to maintain open connections for as long as possible but are
            permitted to terminate idle connections if necessary. When either endpoint chooses to
            close the transport-layer TCP connection, the terminating endpoint SHOULD first send a
            <x:ref>GOAWAY</x:ref>
            (<xref target="GOAWAY"/>) frame so that both endpoints can reliably
            determine whether previously sent frames have been processed and gracefully complete or
            terminate any necessary remaining tasks.
        </t>

        <section anchor="reuse" title="Connection Reuse">
            <t>
                Connections that are made to an origin server, either directly or through a tunnel
                created using the<xref target="CONNECT">CONNECT method</xref>, MAY be reused for
                requests with multiple different URI authority components. A connection can be reused
                as long as the origin server is<xref target="authority">authoritative</xref>. For TCP
                connections without TLS, this depends on the host having resolved to the same IP
                address.
            </t>
            <t>
                For
                <spanx style="verb">https</spanx>
                resources, connection reuse additionally depends
                on having a certificate that is valid for the host in the URI. The certificate
                presented by the server MUST satisfy any checks that the client would perform when
                forming a new TLS connection for the host in the URI.
            </t>
            <t>
                An origin server might offer a certificate with multiple
                <spanx
                        style="verb">subjectAltName
                </spanx>
                attributes or names with wildcards, one of which is
                valid for the authority in the URI. For example, a certificate with a
                <spanx
                        style="verb">subjectAltName
                </spanx>
                of
                <spanx style="verb">*.example.com</spanx>
                might
                permit the use of the same connection for requests to URIs starting with
                <spanx
                        style="verb">https://a.example.com/
                </spanx>
                and<spanx
                    style="verb">https://b.example.com/</spanx>.
            </t>
            <t>
                In some deployments, reusing a connection for multiple origins can result in requests
                being directed to the wrong origin server. For example, TLS termination might be
                performed by a middlebox that uses the TLS
                <xref target="TLS-EXT">Server Name Indication
                    (SNI)
                </xref>
                extension to select an origin server. This means that it is possible
                for clients to send confidential information to servers that might not be the intended
                target for the request, even though the server is otherwise authoritative.
            </t>
            <t>
                A server that does not wish clients to reuse connections can indicate that it is not
                authoritative for a request by sending a 421 (Misdirected Request) status code in response
                to the request (see<xref target="MisdirectedRequest"/>).
            </t>
            <t>
                A client that is configured to use a proxy over HTTP/2 directs requests to that proxy
                through a single connection. That is, all requests sent via a proxy reuse the
                connection to the proxy.
            </t>
        </section>

        <section anchor="MisdirectedRequest" title="The 421 (Misdirected Request) Status Code">
            <t>
                The 421 (Misdirected Request) status code indicates that the request was directed at a
                server that is not able to produce a response. This can be sent by a server that is not
                configured to produce responses for the combination of scheme and authority that are
                included in the request URI.
            </t>
            <t>
                Clients receiving a 421 (Misdirected Request) response from a server MAY retry the
                request &mdash; whether the request method is idempotent or not &mdash; over a different
                connection.
                This is possible if a connection is reused (<xref target="reuse"/>) or if an alternative
                service is selected<xref target="ALT-SVC"/>.
            </t>
            <t>
                This status code MUST NOT be generated by proxies.
            </t>
            <t>
                A 421 response is cacheable by default, i.e., unless otherwise indicated by the method
                definition or explicit cache controls (see<xref target="RFC7234"
                                                                x:rel="#heuristic.freshness" x:fmt="of"/>).
            </t>
        </section>
    </section>

    <section title="Use of TLS Features" anchor="TLSUsage">
        <t>
            Implementations of HTTP/2 MUST use
            <xref target="TLS12">TLS version 1.2</xref>
            or higher
            for HTTP/2 over TLS. The general TLS usage guidance in
            <xref target="TLSBCP"/>
            SHOULD be
            followed, with some additional restrictions that are specific to HTTP/2.
        </t>
        <t>
            The TLS implementation MUST support the
            <xref target="TLS-EXT">Server Name Indication
                (SNI)
            </xref>
            extension to TLS. HTTP/2 clients MUST indicate the target domain name when
            negotiating TLS.
        </t>
        <t>
            Deployments of HTTP/2 that negotiate TLS 1.3 or higher need only support and use the SNI
            extension; deployments of TLS 1.2 are subject to the requirements in the following
            sections. Implementations are encouraged to provide defaults that comply, but it is
            recognized that deployments are ultimately responsible for compliance.
        </t>

        <section title="TLS 1.2 Features">
            <t>
                This section describes restrictions on the TLS 1.2 feature set that can be used with
                HTTP/2. Due to deployment limitations, it might not be possible to fail TLS negotiation
                when these restrictions are not met. An endpoint MAY immediately terminate an HTTP/2
                connection that does not meet these TLS requirements with a
                <xref
                        target="ConnectionErrorHandler">connection error
                </xref>
                of type
                <x:ref>INADEQUATE_SECURITY</x:ref>.
            </t>

            <t>
                A deployment of HTTP/2 over TLS 1.2 MUST disable compression. TLS compression can lead
                to the exposure of information that would not otherwise be revealed<xref
                    target="RFC3749"/>. Generic compression is unnecessary since HTTP/2 provides
                compression features that are more aware of context and therefore likely to be more
                appropriate for use for performance, security, or other reasons.
            </t>
            <t>
                A deployment of HTTP/2 over TLS 1.2 MUST disable renegotiation. An endpoint MUST treat
                a TLS renegotiation as a
                <xref target="ConnectionErrorHandler">connection error</xref>
                of type<x:ref>PROTOCOL_ERROR</x:ref>. Note that disabling renegotiation can result in
                long-lived connections becoming unusable due to limits on the number of messages the
                underlying cipher suite can encipher.
            </t>
            <t>
                An endpoint MAY use renegotiation to provide confidentiality protection for client
                credentials offered in the handshake, but any renegotiation MUST occur prior to sending
                the connection preface. A server SHOULD request a client certificate if it sees a
                renegotiation request immediately after establishing a connection.
            </t>
            <t>
                This effectively prevents the use of renegotiation in response to a request for a
                specific protected resource. A future specification might provide a way to support this
                use case. Alternatively, a server might use an
                <xref target="ErrorHandler">
                    error
                </xref>
                of type
                <x:ref>HTTP_1_1_REQUIRED</x:ref>
                to request the client
                use a protocol that supports renegotiation.
            </t>
            <t>
                Implementations MUST support ephemeral key exchange sizes of at least 2048 bits for
                cipher suites that use ephemeral finite field Diffie-Hellman (DHE)
                <xref
                        target="TLS12"/>
                and 224 bits for cipher suites that use ephemeral elliptic curve
                Diffie-Hellman (ECDHE)<xref target="RFC4492"/>. Clients MUST accept DHE sizes of up
                to 4096 bits. Endpoints MAY treat negotiation of key sizes smaller than the lower
                limits as a
                <xref target="ConnectionErrorHandler">connection error</xref>
                of type
                <x:ref>INADEQUATE_SECURITY</x:ref>.
            </t>
        </section>

        <section title="TLS 1.2 Cipher Suites">
            <t>
                A deployment of HTTP/2 over TLS 1.2 SHOULD NOT use any of the cipher suites that are
                listed in the<xref target="BadCipherSuites">cipher suite black list</xref>.
            </t>
            <t>
                Endpoints MAY choose to generate a
                <xref target="ConnectionErrorHandler">connection
                    error
                </xref>
                of type
                <x:ref>INADEQUATE_SECURITY</x:ref>
                if one of the cipher suites from
                the black list is negotiated. A deployment that chooses to use a black-listed cipher
                suite risks triggering a connection error unless the set of potential peers is known to
                accept that cipher suite.
            </t>
            <t>
                Implementations MUST NOT generate this error in reaction to the negotiation of a cipher
                suite that is not on the black list. Consequently, when clients offer a cipher suite
                that is not on the black list, they have to be prepared to use that cipher suite with
                HTTP/2.
            </t>
            <t>
                The black list includes the cipher suite that TLS 1.2 makes mandatory, which means that
                TLS 1.2 deployments could have non-intersecting sets of permitted cipher suites. To
                avoid this problem causing TLS handshake failures, deployments of HTTP/2 that use TLS
                1.2 MUST support TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
                <xref target="TLS-ECDHE"/>
                with
                the P-256 elliptic curve<xref target="FIPS186"/>.
            </t>
            <t>
                Note that clients might advertise support of cipher suites that are on the black list in
                order to allow for connection to servers that do not support HTTP/2. This allows
                servers to select HTTP/1.1 with a cipher suite that is on the HTTP/2 black list.
                However, this can result in HTTP/2 being negotiated with a black-listed cipher suite if
                the application protocol and cipher suite are independently selected.
            </t>
        </section>
    </section>
</section>
