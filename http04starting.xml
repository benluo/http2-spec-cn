<section anchor="starting" title="Starting HTTP/2">
    <t>
        An HTTP/2 connection is an application-layer protocol running on top of a TCP connection
        (<xref target="TCP"/>). The client is the TCP connection initiator.
    </t>
    <t>
        HTTP/2 uses the same "http" and "https" URI schemes used by HTTP/1.1. HTTP/2 shares the same
        default port numbers: 80 for "http" URIs and 443 for "https" URIs. As a result,
        implementations processing requests for target resource URIs like
        <spanx
                style="verb">http://example.org/foo
        </spanx>
        or
        <spanx
                style="verb">https://example.com/bar
        </spanx>
        are required to first discover whether the
        upstream server (the immediate peer to which the client wishes to establish a connection)
        supports HTTP/2.
    </t>

    <t>
        The means by which support for HTTP/2 is determined is different for "http" and "https"
        URIs. Discovery for "http" URIs is described in<xref target="discover-http"/>. Discovery
        for "https" URIs is described in<xref target="discover-https"/>.
    </t>

    <section anchor="versioning" title="HTTP/2 Version Identification">
        <t>
            The protocol defined in this document has two identifiers.
            <list style="symbols">
                <x:lt>
                    <t>
                        The string "h2" identifies the protocol where HTTP/2 uses<xref
                            target="TLS12">Transport Layer Security (TLS)</xref>. This identifier is used in the
                        <xref
                                target="TLS-ALPN">TLS application-layer protocol negotiation (ALPN) extension
                        </xref>
                        field and in any place where HTTP/2 over TLS is identified.
                    </t>
                    <t>
                        The "h2" string is serialized into an ALPN protocol identifier as the two-octet
                        sequence: 0x68, 0x32.
                    </t>
                </x:lt>
                <x:lt>
                    <t>
                        The string "h2c" identifies the protocol where HTTP/2 is run over cleartext TCP.
                        This identifier is used in the HTTP/1.1 Upgrade header field and in any place where
                        HTTP/2 over TCP is identified.
                    </t>
                    <t>
                        The "h2c" string is reserved from the ALPN identifier space but describes a
                        protocol that does not use TLS.
                    </t>
                </x:lt>
            </list>
        </t>
        <t>
            Negotiating "h2" or "h2c" implies the use of the transport, security, framing, and message
            semantics described in this document.
        </t>
    </section>

    <section anchor="discover-http" title="Starting HTTP/2 for &quot;http&quot; URIs">
        <t>
            A client that makes a request for an "http" URI without prior knowledge about support for
            HTTP/2 on the next hop uses the HTTP Upgrade mechanism (<xref target="RFC7230" x:fmt="of"
                                                                          x:rel="#header.upgrade"/>). The client
            does so by making an HTTP/1.1 request that
            includes an Upgrade header field with the "h2c" token. Such an HTTP/1.1 request MUST
            include exactly one
            <xref target="Http2SettingsHeader">HTTP2-Settings</xref>
            header field.
        </t>
        <figure>
            <preamble>For example:</preamble>
            <artwork type="message/http; msgtype=&#34;request&#34;" x:indent-with="  "><![CDATA[
GET / HTTP/1.1
Host: server.example.com
Connection: Upgrade, HTTP2-Settings
Upgrade: h2c
HTTP2-Settings: <base64url encoding of HTTP/2 SETTINGS payload>

]]></artwork>
        </figure>
        <t>
            Requests that contain a payload body MUST be sent in their entirety before the client can
            send HTTP/2 frames. This means that a large request can block the use of the connection
            until it is completely sent.
        </t>
        <t>
            If concurrency of an initial request with subsequent requests is important, an OPTIONS
            request can be used to perform the upgrade to HTTP/2, at the cost of an additional
            round trip.
        </t>
        <t>
            A server that does not support HTTP/2 can respond to the request as though the Upgrade
            header field were absent:
        </t>
        <figure>
            <artwork type="message/http; msgtype=&#34;response&#34;" x:indent-with="  ">
                HTTP/1.1 200 OK
                Content-Length: 243
                Content-Type: text/html

                ...
            </artwork>
        </figure>
        <t>
            A server MUST ignore an "h2" token in an Upgrade header field. Presence of a token with
            "h2" implies HTTP/2 over TLS, which is instead negotiated as described in<xref
                target="discover-https"/>.
        </t>
        <t>
            A server that supports HTTP/2 accepts the upgrade with a 101 (Switching Protocols)
            response. After the empty line that terminates the 101 response, the server can begin
            sending HTTP/2 frames. These frames MUST include a response to the request that initiated
            the upgrade.
        </t>

        <figure>
            <preamble>
                For example:
            </preamble>
            <artwork type="message/http; msgtype=&#34;response&#34;" x:indent-with="  ">
                HTTP/1.1 101 Switching Protocols
                Connection: Upgrade
                Upgrade: h2c

                [ HTTP/2 connection ...
            </artwork>
        </figure>
        <t>
            The first HTTP/2 frame sent by the server MUST be a server connection preface
            (<xref target="ConnectionHeader"/>) consisting of a
            <x:ref>SETTINGS</x:ref>
            frame (<xref target="SETTINGS"/>). Upon receiving the 101 response, the client MUST send a
            <xref target="ConnectionHeader">connection preface</xref>, which includes a
            <x:ref>SETTINGS</x:ref>
            frame.
        </t>
        <t>
            The HTTP/1.1 request that is sent prior to upgrade is assigned a stream identifier of 1
            (see<xref target="StreamIdentifiers"/>) with<xref target="pri-default">default priority
            values</xref>. Stream 1 is implicitly "half-closed" from the client toward the server
            (see<xref target="StreamStates"/>), since the request is completed as an HTTP/1.1
            request. After commencing the HTTP/2 connection, stream 1 is used for the response.
        </t>

        <section anchor="Http2SettingsHeader" title="HTTP2-Settings Header Field">
            <t>
                A request that upgrades from HTTP/1.1 to HTTP/2 MUST include exactly one
                <spanx
                        style="verb">HTTP2-Settings
                </spanx>
                header field. The
                <spanx
                        style="vbare">HTTP2-Settings
                </spanx>
                header field is a connection-specific header field
                that includes parameters that govern the HTTP/2 connection, provided in anticipation of
                the server accepting the request to upgrade.
            </t>
            <figure>
                <artwork type="abnf" x:indent-with="  "><![CDATA[
HTTP2-Settings    = token68
]]></artwork>
            </figure>
            <t>
                A server MUST NOT upgrade the connection to HTTP/2 if this header field is not present
                or if more than one is present. A server MUST NOT send this header field.
            </t>

            <t>
                The content of the
                <spanx style="vbare">HTTP2-Settings</spanx>
                header field is the
                payload of a
                <x:ref>SETTINGS</x:ref>
                frame (<xref target="SETTINGS"/>), encoded as a
                base64url string (that is, the URL- and filename-safe Base64 encoding described in<xref
                    target="RFC4648" x:fmt="of" x:sec="5"/>, with any trailing '=' characters omitted). The
                <xref target="RFC5234">ABNF</xref>
                production for
                <spanx style="verb">token68</spanx>
                is
                defined in<xref target="RFC7235" x:fmt="of" x:rel="#challenge.and.response"/>.
            </t>
            <t>
                Since the upgrade is only intended to apply to the immediate connection, a client
                sending the
                <spanx style="vbare">HTTP2-Settings</spanx>
                header field MUST also send
                <spanx
                        style="verb">HTTP2-Settings
                </spanx>
                as a connection option in the
                <spanx
                        style="vbare">Connection
                </spanx>
                header field to prevent it from being forwarded (see
                <xref target="RFC7230" x:fmt="of" x:rel="#header.connection"/>).
            </t>
            <t>
                A server decodes and interprets these values as it would any other
                <x:ref>SETTINGS</x:ref>
                frame. Explicit
                <xref target="SettingsSync">acknowledgement of
                    these settings
                </xref>
                is not necessary, since a 101 response serves as implicit
                acknowledgement. Providing these values in the upgrade request gives a client an
                opportunity to provide parameters prior to receiving any frames from the server.
            </t>
        </section>
    </section>

    <section anchor="discover-https" title="Starting HTTP/2 for &quot;https&quot; URIs">
        <t>
            A client that makes a request to an "https" URI uses
            <xref target="TLS12">TLS</xref>
            with
            the<xref target="TLS-ALPN">application-layer protocol negotiation (ALPN)
            extension</xref>.
        </t>
        <t>
            HTTP/2 over TLS uses the "h2" protocol identifier. The "h2c" protocol identifier MUST NOT
            be sent by a client or selected by a server; the "h2c" protocol identifier describes a
            protocol that does not use TLS.
        </t>
        <t>
            Once TLS negotiation is complete, both the client and the server MUST send a<xref
                target="ConnectionHeader">connection preface</xref>.
        </t>
    </section>

    <section anchor="known-http" title="Starting HTTP/2 with Prior Knowledge">
        <t>
            A client can learn that a particular server supports HTTP/2 by other means. For example,
            <xref target="ALT-SVC"/>
            describes a mechanism for advertising this capability.
        </t>
        <t>
            A client MUST send the
            <xref target="ConnectionHeader">connection preface</xref>
            and
            then MAY immediately send HTTP/2 frames to such a server; servers can identify these
            connections by the presence of the connection preface. This only affects the
            establishment of HTTP/2 connections over cleartext TCP; implementations that support
            HTTP/2 over TLS MUST use<xref target="TLS-ALPN">protocol negotiation in TLS</xref>.
        </t>
        <t>
            Likewise, the server MUST send a<xref target="ConnectionHeader">connection preface</xref>.
        </t>
        <t>
            Without additional information, prior support for HTTP/2 is not a strong signal that a
            given server will support HTTP/2 for future connections. For example, it is possible for
            server configurations to change, for configurations to differ between instances in
            clustered servers, or for network conditions to change.
        </t>
    </section>

    <section anchor="ConnectionHeader" title="HTTP/2 Connection Preface">
        <t>
            In HTTP/2, each endpoint is required to send a connection preface as a final confirmation
            of the protocol in use and to establish the initial settings for the HTTP/2 connection.
            The client and server each send a different connection preface.
        </t>
        <t>
            The client connection preface starts with a sequence of 24 octets, which in hex notation
            is:
        </t>
        <figure>
            <artwork type="inline" x:indent-with="  "><![CDATA[
0x505249202a20485454502f322e300d0a0d0a534d0d0a0d0a
]]></artwork>
        </figure>
        <t>
            That is, the connection preface starts with the string<spanx style="verb">PRI *
            HTTP/2.0\r\n\r\nSM\r\n\r\n</spanx>). This sequence
            MUST be followed by a
            <x:ref>SETTINGS</x:ref>
            frame (<xref target="SETTINGS"/>), which
            MAY be empty. The client sends the client connection preface immediately upon receipt of
            a 101 (Switching Protocols) response (indicating a successful upgrade) or as the first
            application data octets of a TLS connection. If starting an HTTP/2 connection with prior
            knowledge of server support for the protocol, the client connection preface is sent upon
            connection establishment.
        </t>
        <x:note>
            <t>
                <x:h>Note:</x:h>
                The client connection preface is selected so that a large proportion of HTTP/1.1 or
                HTTP/1.0 servers and intermediaries do not attempt to process further frames. Note
                that this does not address the concerns raised in<xref target="TALKING"/>.
            </t>
        </x:note>
        <t>
            The server connection preface consists of a potentially empty
            <x:ref>SETTINGS</x:ref>
            frame (<xref target="SETTINGS"/>) that MUST be the first frame the server sends in the
            HTTP/2 connection.
        </t>
        <t>
            The
            <x:ref>SETTINGS</x:ref>
            frames received from a peer as part of the connection preface
            MUST be acknowledged (see<xref target="SettingsSync"/>) after sending the connection
            preface.
        </t>
        <t>
            To avoid unnecessary latency, clients are permitted to send additional frames to the
            server immediately after sending the client connection preface, without waiting to receive
            the server connection preface. It is important to note, however, that the server
            connection preface
            <x:ref>SETTINGS</x:ref>
            frame might include parameters that necessarily
            alter how a client is expected to communicate with the server. Upon receiving the
            <x:ref>SETTINGS</x:ref>
            frame, the client is expected to honor any parameters established.
            In some configurations, it is possible for the server to transmit
            <x:ref>SETTINGS</x:ref>
            before the client sends additional frames, providing an opportunity to avoid this issue.
        </t>
        <t>
            Clients and servers MUST treat an invalid connection preface as a
            <xref
                    target="ConnectionErrorHandler">connection error
            </xref>
            of type
            <x:ref>PROTOCOL_ERROR</x:ref>. A
            <x:ref>GOAWAY</x:ref>
            frame (<xref target="GOAWAY"/>)
            MAY be omitted in this case, since an invalid preface indicates that the peer is not using
            HTTP/2.
        </t>
    </section>
</section>
