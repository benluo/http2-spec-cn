<section anchor="FramingLayer" title="HTTP Frames">
    <t>
        Once the HTTP/2 connection is established, endpoints can begin exchanging frames.
    </t>

    <section anchor="FrameHeader" title="Frame Format">
        <t>
            All frames begin with a fixed 9-octet header followed by a variable-length payload.
        </t>
        <figure anchor="FrameLayout" title="Frame Layout">
            <artwork type="inline"><![CDATA[
 +-----------------------------------------------+
 |                 Length (24)                   |
 +---------------+---------------+---------------+
 |   Type (8)    |   Flags (8)   |
 +-+-------------+---------------+-------------------------------+
 |R|                 Stream Identifier (31)                      |
 +=+=============================================================+
 |                   Frame Payload (0...)                      ...
 +---------------------------------------------------------------+
]]></artwork>
        </figure>
        <t>
            The fields of the frame header are defined as:
            <list style="hanging">
                <x:lt hangText="Length:">
                    <t>
                        The length of the frame payload expressed as an unsigned 24-bit integer. Values
                        greater than 2
                        <x:sup>14</x:sup>
                        (16,384) MUST NOT be sent unless the receiver has
                        set a larger value for<x:ref>SETTINGS_MAX_FRAME_SIZE</x:ref>.
                    </t>
                    <t>
                        The 9 octets of the frame header are not included in this value.
                    </t>
                </x:lt>
                <x:lt hangText="Type:">
                    <t>
                        The 8-bit type of the frame. The frame type determines the format and semantics of
                        the frame. Implementations MUST ignore and discard any frame that has a type that
                        is unknown.
                    </t>
                </x:lt>
                <x:lt hangText="Flags:">
                    <t>
                        An 8-bit field reserved for boolean flags specific to the frame type.
                    </t>
                    <t>
                        Flags are assigned semantics specific to the indicated frame type. Flags that have
                        no defined semantics for a particular frame type MUST be ignored and MUST be left
                        unset (0x0) when sending.
                    </t>
                </x:lt>
                <x:lt hangText="R:">
                    <t>
                        A reserved 1-bit field. The semantics of this bit are undefined, and the bit MUST
                        remain unset (0x0) when sending and MUST be ignored when receiving.
                    </t>
                </x:lt>
                <x:lt hangText="Stream Identifier:">
                    <t>
                        A stream identifier (see<xref target="StreamIdentifiers"/>) expressed as an
                        unsigned 31-bit integer. The value 0x0 is reserved for frames that are associated
                        with the connection as a whole as opposed to an individual stream.
                    </t>
                </x:lt>
            </list>
        </t>
        <t>
            The structure and content of the frame payload is dependent entirely on the frame type.
        </t>
    </section>

    <section anchor="FrameSize" title="Frame Size">
        <t>
            The size of a frame payload is limited by the maximum size that a receiver advertises in
            the
            <x:ref>SETTINGS_MAX_FRAME_SIZE</x:ref>
            setting. This setting can have any value
            between 2
            <x:sup>14</x:sup>
            (16,384) and 2<x:sup>24</x:sup>-1 (16,777,215) octets,
            inclusive.
        </t>
        <t>
            All implementations MUST be capable of receiving and minimally processing frames up to
            2
            <x:sup>14</x:sup>
            octets in length, plus the 9-octet<xref target="FrameHeader">frame
            header</xref>. The size of the frame header is not included when describing frame sizes.
        </t>
        <x:note>
            <t>
                <x:h>Note:</x:h>
                Certain frame types, such as<xref target="PING">PING</xref>, impose additional limits
                on the amount of payload data allowed.
            </t>
        </x:note>
        <t>
            An endpoint MUST send an error code of
            <x:ref>FRAME_SIZE_ERROR</x:ref>
            if a frame exceeds the size
            defined in<x:ref>SETTINGS_MAX_FRAME_SIZE</x:ref>, exceeds any limit defined for the frame type,
            or is too small to contain mandatory frame data. A frame size error in a frame that
            could alter the state of the entire connection MUST be treated as a<xref
                target="ConnectionErrorHandler">connection error</xref>; this includes any frame carrying
            a
            <xref target="HeaderBlock">header block</xref>
            (that is,<x:ref>HEADERS</x:ref>,
            <x:ref>PUSH_PROMISE</x:ref>, and<x:ref>CONTINUATION</x:ref>),<x:ref>SETTINGS</x:ref>,
            and any frame with a stream identifier of 0.
        </t>
        <t>
            Endpoints are not obligated to use all available space in a frame. Responsiveness can be
            improved by using frames that are smaller than the permitted maximum size. Sending large
            frames can result in delays in sending time-sensitive frames (such as
            <x:ref>RST_STREAM</x:ref>,<x:ref>WINDOW_UPDATE</x:ref>, or<x:ref>PRIORITY</x:ref>),
            which, if blocked by the transmission of a large frame, could affect performance.
        </t>
    </section>

    <section anchor="HeaderBlock" title="Header Compression and Decompression">
        <t>
            Just as in HTTP/1, a header field in HTTP/2 is a name with one or more associated values.
            Header fields are used within HTTP request and response messages as well as in server push
            operations
            (see<xref target="PushResources"/>).
        </t>
        <t>
            Header lists are collections of zero or more header fields. When transmitted over a
            connection, a header list is serialized into a header block using<xref
                target="COMPRESSION">HTTP header compression</xref>. The serialized header block is then
            divided into one or more octet sequences, called header block fragments, and transmitted
            within the payload of<xref target="HEADERS">HEADERS</xref>,<xref
                target="PUSH_PROMISE">PUSH_PROMISE</xref>, or
            <xref
                    target="CONTINUATION">CONTINUATION
            </xref>
            frames.
        </t>
        <t>
            The
            <xref target="COOKIE">Cookie header field</xref>
            is treated specially by the HTTP
            mapping (see<xref target="CompressCookie"/>).
        </t>
        <t>
            A receiving endpoint reassembles the header block by concatenating its fragments and then
            decompresses the block to reconstruct the header list.
        </t>
        <t>
            A complete header block consists of either:
            <list style="symbols">
                <t>
                    a single
                    <x:ref>HEADERS</x:ref>
                    or
                    <x:ref>PUSH_PROMISE</x:ref>
                    frame,
                    with the END_HEADERS flag set, or
                </t>
                <t>
                    a
                    <x:ref>HEADERS</x:ref>
                    or
                    <x:ref>PUSH_PROMISE</x:ref>
                    frame with the END_HEADERS
                    flag cleared and one or more
                    <x:ref>CONTINUATION</x:ref>
                    frames,
                    where the last
                    <x:ref>CONTINUATION</x:ref>
                    frame has the END_HEADERS flag set.
                </t>
            </list>
        </t>
        <t>
            Header compression is stateful. One compression context and one decompression context are
            used for the entire connection. A decoding error in a header block MUST be treated as a
            <xref target="ConnectionErrorHandler">connection error</xref>
            of type
            <x:ref>COMPRESSION_ERROR</x:ref>.
        </t>
        <t>
            Each header block is processed as a discrete unit.
            Header blocks MUST be transmitted as a contiguous sequence of frames, with no interleaved
            frames of any other type or from any other stream. The last frame in a sequence of
            <x:ref>HEADERS</x:ref>
            or
            <x:ref>CONTINUATION</x:ref>
            frames has the END_HEADERS flag set.
            The last frame in a sequence of
            <x:ref>PUSH_PROMISE</x:ref>
            or
            <x:ref>CONTINUATION</x:ref>
            frames has the END_HEADERS flag set. This allows a header block to be logically
            equivalent to a single frame.
        </t>
        <t>
            Header block fragments can only be sent as the payload of<x:ref>HEADERS</x:ref>,
            <x:ref>PUSH_PROMISE</x:ref>, or
            <x:ref>CONTINUATION</x:ref>
            frames because these frames
            carry data that can modify the compression context maintained by a receiver. An endpoint
            receiving<x:ref>HEADERS</x:ref>,<x:ref>PUSH_PROMISE</x:ref>, or
            <x:ref>CONTINUATION</x:ref>
            frames needs to reassemble header blocks and perform
            decompression even if the frames are to be discarded. A receiver MUST terminate the
            connection with a
            <xref target="ConnectionErrorHandler">connection error</xref>
            of type
            <x:ref>COMPRESSION_ERROR</x:ref>
            if it does not decompress a header block.
        </t>
    </section>
</section>
